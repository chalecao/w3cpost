<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>万维刀客 on</title><link>/contributors/%E4%B8%87%E7%BB%B4%E5%88%80%E5%AE%A2/</link><description>Recent content in 万维刀客 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Mon, 10 Oct 2022 09:19:42 +0100</lastBuildDate><atom:link href="/contributors/%E4%B8%87%E7%BB%B4%E5%88%80%E5%AE%A2/index.xml" rel="self" type="application/rss+xml"/><item><title>面试STAR法则</title><link>/blog/%E9%9D%A2%E8%AF%95star%E6%B3%95%E5%88%99/</link><pubDate>Mon, 10 Oct 2022 09:19:42 +0100</pubDate><guid>/blog/%E9%9D%A2%E8%AF%95star%E6%B3%95%E5%88%99/</guid><description>面试 # 说起面试，总会感觉心慌慌。可能是不自信，可能是感觉好多没准备好。没关系，既然投了简历，又通过了筛选，就不要胆怯。面试官也只是想聊聊你的具体情况。既然面试官愿意花时间和你聊，那么证明自己还是有实力的，有被看中的发光点，那么有什么好心虚的呢，勇敢自信的面对就好了。
说起我自己，我觉得自己有一点社会交际恐惧症。可能是之前工作太拼命了，觉得脑子瓦塔了。很多时候在和同事交流的时候，总感觉有些想法表达不出来，或者是说不清楚。内心了也担心自己说不清楚，于是越说越紧张，结果说的是一塌糊涂。本来很清晰明了的事情，由于内心的着急担心，或者说是一种不自信，更是雪上加霜的有一次伤害了自己。
大家都是做技术的，说傻也不傻，说笨也不笨，我们需要的，就是那么一丢丢的自信。
STAR法则 # S = situation，环境或者说是条件，是你完成某项工作的大背景
T = task，任务，也就是你做了什么事情，以及为什么要做这样的工作，预期是什么？
A = action，行动，你是怎么完成任务的，担当那些角色，工作中的思考和见解，有没有优化点，创新点
R = result，结果，这项任务最终拿到了什么结果？是否符合期望？反思如何保证工作能够达到期望？
上面介绍了面试中常用的STAR法则。我期望大家做简历的时候最好也按照这样的条例来整理自己的项目经验。我做过3-4年的面试官，看过不少简历，面试过不少同学，当然也发了不少offer。从简历上你会发现学习好的和学习差的，用心的和不用心的简历差别很大。当然做简历的基本技巧也是一部分。
面试官在面试时，首先都会询问基本情况，比如工作区域性要求，岗位要求，未来发展要求是否合适。然后基本上都会顺着简历聊一些项目经验，然后深入展开。
面试官面试套路 # 面试时所问的问题基本分为两种：具象的问题和开放性的问题。
具象的问题基本都会参考工作经验按照STAR法则来进行，主要是了解基本的工作素养，了解开发人员在工作中的深度和潜力。
开放性的问题基本是考察大家的思维发散能力，考察在某个领域的深度和广度，基本上会结合技术问题来问。如果非技术问题，可能会结合工作实例来问。
比如：实现什么技术的n种方法？某种技术的实现原理？和什么什么相比有哪些优缺点？你对这项技术的思考是什么？
面试者的回答套路 # star法则问的问题当然就实际情况做回答，提前准备的时候多发散，多思考，多总结。这一块是可以自己准备的加分项。 发散性问题看自己积累了。首先基础知识要牢固，要了解最新技术动态。平时看看相关的技术分享，技术博客。 交锋相对 # 面试官在面试结束的时候一般会让面试者问自己一些想了解的问题。这里面有一些潜规则说明一下。
不要问面试官对自己的评价。问了也白问，面试官不会说的。 不要问机会和面试结果。问了也白问，面试官不会说的。一次面试也决定不了大局。 不要问指导意见。面试官可能会说，但是这种并没有体现这个问题的价值。 可以问面试岗位的工作情况和自己的匹配度。这是比较好的问题，面试官也愿意和你说说工作的情况。 面试心理 # 推荐看下 《财富理论》 这部爱情电影，里面有介绍一些面试心理建设的事情。祝大家Good luck！</description></item><item><title>如何高效工作</title><link>/blog/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%B7%A5%E4%BD%9C/</link><pubDate>Wed, 10 Aug 2022 09:19:42 +0100</pubDate><guid>/blog/%E5%A6%82%E4%BD%95%E9%AB%98%E6%95%88%E5%B7%A5%E4%BD%9C/</guid><description>产出 = 单位时间产能 × 有效工作时间，要做到高产出，有两条路：
增加有效工作时间 提高单位时间的产能 增加有效工作时间 # 时间是每个人都拥有的最宝贵、最公平的财富，每天只有 24 小时，不会多也不会少，除去正常生活所需时间，可用作工作和学习的时间大概在 12 小时，我们能做的是让这些时间尽可能用在有价值的事情上。
要有效利用时间，终极大招就是乔布斯实践的：If today were the last day of my life, would I want to do what I am about to do today? 巴西 塞氏企业 的掌门人 Ricardo Semler 在 How to run a company with (almost) no rules 这个 TED 演讲中也分享了类似做法：On Mondays and Thursdays, I learn how to die. , I call them my terminal days…
但这招太过刚猛，得一定的机缘方可练就，未必适合普通人。美籍作家 Leana Delle 在 Don’t Live Each Day As If It Were Your Last 这个 TED 视频中讲的分享的：“If today were the first day of my life, and i have more days ahead, wolud i want to do what I’m about to do today?</description></item><item><title>开发规范和原则</title><link>/blog/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E5%92%8C%E5%8E%9F%E5%88%99/</link><pubDate>Tue, 10 Nov 2020 09:19:42 +0100</pubDate><guid>/blog/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E5%92%8C%E5%8E%9F%E5%88%99/</guid><description>编码规范 # 参考业界编码规范：
HTML规范 Airbnb JS规范 CSS规范 Airbnb React规范 目前前端项目ESLINT配置：
{ &amp;quot;root&amp;quot;: true, &amp;quot;parser&amp;quot;: &amp;quot;babel-eslint&amp;quot;, &amp;quot;extends&amp;quot;: &amp;quot;eslint-config-airbnb&amp;quot;, &amp;quot;parserOptions&amp;quot;: { &amp;quot;ecmaVersion&amp;quot;: 6, &amp;quot;ecmaFeatures&amp;quot;: { &amp;quot;jsx&amp;quot;: true, &amp;quot;experimentalObjectRestSpread&amp;quot;: true } }, &amp;quot;env&amp;quot;: { &amp;quot;browser&amp;quot;: true, &amp;quot;mocha&amp;quot;: true }, &amp;quot;plugins&amp;quot;: [ &amp;quot;react&amp;quot;, &amp;quot;babel&amp;quot; ], &amp;quot;rules&amp;quot;: { &amp;quot;react/prefer-stateless-function&amp;quot;: , &amp;quot;no-console&amp;quot;: , &amp;quot;no-use-before-define&amp;quot;: , &amp;quot;jsx-a11y/label-has-for&amp;quot;: , &amp;quot;jsx-a11y/no-static-element-interactions&amp;quot;: , &amp;quot;jsx-a11y/anchor-has-content&amp;quot;: , &amp;quot;jsx-a11y/click-events-have-key-events&amp;quot;: , &amp;quot;jsx-a11y/anchor-is-valid&amp;quot;: , &amp;quot;react/no-array-index-key&amp;quot;: , &amp;quot;func-names&amp;quot;: , &amp;quot;arrow-body-style&amp;quot;: , &amp;quot;react/sort-comp&amp;quot;: , &amp;quot;react/prop-types&amp;quot;: , &amp;quot;react/jsx-first-prop-new-line&amp;quot;: , &amp;quot;react/jsx-filename-extension&amp;quot;: [ 1, { &amp;quot;extensions&amp;quot;: [ &amp;quot;.</description></item><item><title>Pecha kucha提升效率</title><link>/blog/pecha-kucha%E6%8F%90%E5%8D%87%E6%95%88%E7%8E%87/</link><pubDate>Sat, 10 Nov 2018 09:19:42 +0100</pubDate><guid>/blog/pecha-kucha%E6%8F%90%E5%8D%87%E6%95%88%E7%8E%87/</guid><description>Pecha kucha是一种演讲形式，该演讲规定使用20张演示文稿，并用20秒讲述一张的时间完成（即共6分40秒）。能够帮助你高效演讲输出内容。
当我们想用最大的功率输出时需要考虑两方面的内容：
第一确定逻辑，包括Explanation和Argument； 第二考虑它的展现形式，包括Visualization和Expression。 前者是内在的，即这件事本身是什么，后者是指演讲者和听众完成信息传递的过程。不管大家使用何种语言，只要是完成信息的输出，这种方法都适用。
你可能会好奇，展现形式好理解一些，但是这跟Explanation和Argument有什么关系呢？Explanation和Argument是我们最常见的内部逻辑的展现形式。从生活角度来讲，两个人聊的热火朝天的关键不在于事件本身，而在于双方对于事件的评价，比如说“吐槽君”中前半部分可能是事实的罗列，但话题升温一定是因为人们对其动机的考察（即Explanation），以及在某一个假设之下所得出的结论（即Argument）；从正式场合角度讲，在一家公司里面，展示者汇报时会展示业绩和数字，但展示数字不是目的，最终是希望从数字中得出某个结论，而这个结论能够让大家保持一种高度集中的状态。
比如，展示者先展示数字，而后给观众解释为什么会该数字出现的原因，并最终抽象出一个结论，总结经验教训，使公司在下一个季度得到更好的业绩。因而无论是正式还是非正式场合，内部逻辑的展现形式不仅限于记叙和描写，这种逻辑发生在我们生活的各个角落。而记叙和描述都是手段而非最终目的，他们的最终目的要么是解释一件事（Explanation），要么是为了提出一个观点去论述（Argument）。
下面我们分别来解释这两方面内容。
01 确定逻辑 # 因果关系与相关性 # Explanation和Argument在人类的头脑中的外在展现形式几乎一模一样，不论解释一件事情还是要论述一个观点，结构基本一致，两者都涉及到因果关系，只是目的不同。比如说，我们有“一个人很伤心”和“父母亡故”两个要素。此时会出现两种情况，第一种情况，两者间存在相关性。相关性是指“这个人很伤心”和“父母亡故“之间肯定有某种联系，但我们无法确定两者是何种联系。比如说”一个人伤心“和”父母亡故“可能出于同一个原因，推理如下，国破导致”一个人很伤心“，国破导致”父母亡故“，这便是一种相关性，而这其中的一个隐含的前提是父母亡故与他伤心没有什么直接的关联，也就是说这两个事件彼此独立存在，“这个人”可能与他的父母关系不好，且没有太多的感情。第二种情况，两者间存在因果性。因果性是指”父母亡故“直接导致了”一个人很伤心“，因而，因果性是相关性中非常具体的一种。
Explanation 解读 # Explanation和Argument都涉及因果关系，但在Explanation里面，“果”是事实，所以在解释时，我们需要往前追溯原因，因而我们将“果”叫做“待解释的事情“（它是已经发生的具体的事情）。而在往前追溯的过程中，人们往往会加入自己的理解，所以很多人在解释一件事时很容易出现错误归因，或者说人们以为是这样的但事实并非如此。回到现实世界，历史学家整理史料的过程其实就是往前追溯找原因的过程，且历史学中的“因果”都是具体的事情，比如说希特勒发动全欧战争，希特勒参加过一战并且受过极端思想的洗礼，德意志当时受过19世纪浪漫主义哲学和文化的影响，种族主义的概念和达尔文提出的进化论的思想开始蔓延，这几件事都是事实，但当历史学家做研究时，很有可能将后面的几点作为希特勒发动全欧战争的原因，但问题是，这几点一定是希特勒发动全欧战争的原因吗？不一定，我们只能说这几点的可能性较大，但我们没办法百分百确定。总结一下，我们把知道结果后往前追溯原因的过程称为Explanation，原因我们管它叫做Hypothesis，结果叫Explanandum（待解释的事情）。
Argument 解读 # Explanation和Argument有何区别呢？第一，Argument里面的“Premise to Conclusion”和Explanation里面的 “Hypothesis to Explanadum”结构相同，但方向相反。以“只要你花时间就一定能提高成绩”为例，在Argument里面，“只要你花时间就一定能提高成绩”这句话本身就是一个Argument；而用Explanation的方式，我们可以解读为“这个人的成绩提高了很多，他一定花了很多时间。”第二，Argument里面的因果跟Explanation里面的因果的确定性是相反的。Explanation里面的果（Explanandum）是事实，是确定的，是一个待解释的事情，Explanation这个过程是我们知道了结果后往前追溯原因，因而这个因是假说（Hypothesis），是不确定的。Argument中的Premises（前提）是“因”，是确定的，Argument这个过程是我们根据这个前提最后推理得出一个结论，而这个结论是“果”，是不确定的。
理解升级 # 自然科学和社会科学都经历了两个阶段：第一个阶段是实验室阶段（Explanation），我们做的每一个实验都是果（Explanandum），是事实（Fact），是确定的、是“待解释的事情”，而后你提出一个假说（Hypothesis），是“因”，这个假说是不确定的，是需要验证的。第二个阶段是论证阶段（Argument），假说（Hypothesis）包含前提（Premises）和结论（Conclusion），此时你需要进行进一步的验证，看前提（Premises）能否得出结论（Conclusion），这便完成了整个科学的过程。
举个例子，我们现在提出一个果（Explanandum）：两个人在最初的时候观念并没有固化，但经过争吵之后，原有的印象将会被强化。接下来，我们看一下它分别是怎样经历这两个阶段的。
首先第一步是实验室阶段（Explanation），心理学家观察到原本两人观点相似，只是中间有一点小差别，比如说你父母让你考公务员，当你跟父母之间没有冲突时，家长认为公务员可能是一个更好的选择，但如果你想选择北漂，其实也未尝不可。你的想法是北漂可能会更好一点，但做公务员也可以。但争吵之后，爸妈的想法变成了公务员成了唯一的选择，北漂就是不务正业。此时，你的想法变成了北漂就是最正确的选择，公务员就是浪费生命，此时你们的观点都被强化了，到这为止还依然处于实验室阶段。
第二步是论证阶段（Argument），此时，心理学家提出了某一项假说（Hypothesis），称该现象为逆火效应（遇上与自身信念抵触的观点或证据时，除非它们足以完全摧毁原信念，否则会忽略或反驳它们，原信念反而更加强化。），并将此固化下来且加以验证。这个过程是：双方必须满足以下前提（Premise）得出最后的结论（Conclusion）：双方观点大体一致但有微小差别，双方在争吵之前没有从对方角度思考问题。这些前提一定会导致一个结果，即：本来是讨论问题，最后变成了激化问题。
到现在为止看明白了吗？
再举个例子，就学科而言，有的学科里面存在大量的Explanation，而有的学科中为Argument。比如，历史学基本都是Explanation，而大量的社会科学，如心理学都是Argument。Explanation是归纳推理（Inductive Reasoning），是经验的，即它的原因是我们从事实本身抽象出来的；Argument是演绎推理（Deductive Reasoning），是理性的，从前提（Premise），进行逻辑推演，最后推导出一个结论（Conclusion）。历史中大量的历史事件都是待解释的事物（Explanadum）。而我们提出的各种各样的理论，比如十字军东征里面的人类本性（Human Nature）和教权在增长过程中对权力的渴望都是假说（Hypothesis）的一个部分，因而历史的题材非常简单，就是Explanation，这也就解释了为什么历史学家总是在喋喋不休的吵，因为他没有办法完成Argument，因为我们没有办法把它放在实验室环境中观察，我们知道的只能是一件又一件Explanadum（待解释的事情），我们唯一能做的就是把历史事件尽可能完成的呈现，然后筛选出具有最强的解释效果的事件。
确定框架和结构 # 通过前面的讲解我们知道，在Explanation中，你需要确定的是果（Explanadum）,而在Argument中，你需要确定的是前提（Premises）。果（ Explanadum）确定后往前追溯因，便可提出假说（Hypothesis）；在Argument中， 你需要确定前提（Premises），由一个个前提最终推演出结论（Conclusion）。
因此做好Pecha Kucha分两个阶段：第一个阶段为准备阶段，第二个阶段为展示阶段。准备过程为从果（Explanadum）往回追溯原因（Causes）的过程；原因确定以后，在展示环节，我们应该先给假说（Hypothesis），假说包括前提（Premise）和结论（Conclusion），推理过程为，先给出前提（Premise），中间讲事情发展的过程，最后得出一个结论（Conclusion）。
举个例子，有的同学在做Pecha Kucha的时候会对比雅典和斯巴达，当提出“Why did they differ？”时，这里面包含两层信息，分别是“They”和”Differ“. They differ”是指”There are the differences between Athen and Sparta”，这是果（Explanandum），是待解释的事物；Why是原因（The Causes），即我们需要找Origins. 为什么这个展现形式非常好？因为演说者在展现的过程中，一上来给观众的是一个关键词（待解释的事情：Explanadum），也就是主题（Topic）和我将会去解释的Why（Hyphothesis）。在随后的的演说中，演说者为观众展现两个主体（雅典和斯巴达）之间的关系。也就是说，听众在看第一页时并不知道Athen和Sparta这两个关键词的具体含义，但当他们听完Presentation后知道，雅典和斯巴达这两个地方是有区别的，同时他还知道这件事是有原因的。演说的逻辑是演说者的演说分三步，第一步是告诉大家雅典和斯巴达有区别，且这个区别有原因的；第二步是详细论述两者之间的具体区别；第三步具体分析造成区别的原因。演说的展现形式是雅典是怎样的，斯巴达是怎样的，两者有何区别，造成这种区别的原因是什么。
确定具体细节和技法 # 刚才说过，展现形式分两部分，第一部分是“确定大的框架和结构”，涉及到两种逻辑，分别是解释（Explanation）和论证（Argument）；第二部分是”确定具体的细节“，则需要具体的，非常细节的技法，包括可视化（Visualization）和
大家在做Pecha Kucha时都用到了这两种技法，我最担心的不是大家可视化或表达做的不好，最担心的是大家在演说过程中产生了逆火效应，把责任一股脑的推给听众，指责对方“这个你怎样都听不懂。”；同理，当我们与他人沟通时，之所以会出现跟父母沟通不畅，跟朋友们闹掰这种情况，原因在于两方都不愿意担这个责任。Pecha Kucha涉及到两个主体，分别是演讲者和听众，其中前者是可控因素，因为演讲者之所以做Presentation就是因为听众逻辑可能不强，所以当我们在做Presentation时，如果逻辑最差的听众也能听懂并且被你吸引，就意味着你的Presentation是非常成功的。但如果大家不被人们所理解，或者被人们认为“说不明白话”时不要抱怨，因为对你而言，抱怨就相当于听众把责任推到你身上，如果你希望事情变得更好一些，你应该把责任揽到自己身上，从自己的角度出发，不断思考怎样让自己的表达更清楚，怎样让自己的图形展示更清楚，打破知识的诅咒，让逻辑不清的人也能听懂你的演说。
那到底什么是Visualization，什么是Expression呢？别着急，其实这两个概念在我们日常跟朋友聊天的过程中都有用到。 大家注意，可视化不一定非要用图，可视化的关键不在于你用什么图来展示，而在于你给人们脑海中留下了什么图。</description></item><item><title>在工作中成长</title><link>/blog/%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E6%88%90%E9%95%BF/</link><pubDate>Tue, 10 Jun 2014 09:19:42 +0100</pubDate><guid>/blog/%E5%9C%A8%E5%B7%A5%E4%BD%9C%E4%B8%AD%E6%88%90%E9%95%BF/</guid><description>成长 # 成长，是一个值得深思的话题。每个人都要成长，想起了一首歌：“多么痛的领悟….”
成长，不仅是身体的成长，更多的是经验的积累，认知的提升。我从下面几个角度来分享下我的成长。
积累，可能你听长辈说过“我吃过的盐比你吃过的饭还多”
对的，随着时光的推移，所有的经历都是累积起来的。那么问题来了，有两种累积方式：
A：0.01 x 365 = 3.65 B：1.01 ^ 365 = Math.pow(1.01, 365) = 37.78343433288728
你能看出上面两种方式的差别吗？
A是每天学习0.01，那么365不忘的情况下，学习累积的是3.65
B是每天在昨天的基础之上学习0.01，学习累积的是37.78
那么，怎么才能做到每天在昨天的基础之上积累呢？
消化吸收每天学习的0.01，不仅是知识上的看到，要转换成经验上的得到 总结学习的知识，转化成自己的语言 工作 # 工作，如何看待你的工作？怎么工作才不算是虚度？
上学时，面对课本；工作了，面对电脑；让时间一点一点消逝，年纪一点一点变老，头发一根一根掉落，腰椎颈椎一点一点突出。。。。
阿里巴巴有句话“认真生活，快乐工作”
工作上认认真真，一丝不苟，“既要。。。，又要。。。，还要。。。”
生活上开开心心，不要计较一点点鸡毛蒜皮的小事，不计算一元两元的金钱得失，才能快乐
问题是，工作中你能得到什么，才不算是虚度？
很多同学工作一段时间都会有这样的问题：
A：我不想天天做重复的东西，改改这，改改那，没什么意思，对于我也没什么提升
B：我不想做这些没人用的业务，做这么复杂，又没有人用，有什么意义
C：我觉得现在做的事情没什么意思，我也没有成长。我想做xxxx事情，但是跟业务没有结合，用不上，没时间做
D：我做的事情不比别人少，但是绩效却比别人差？
E：我的工资和付出不成正比，我的同学某某都已经xx级别了，年薪xx万
能力，经常听说“大牛，大神，撒泡尿照照自己，找自己”
什么是能力？你拥有什么能力，你想要什么能力？怎么GET这些能力？
工作了之后，准确的说应该是行业能力。在你所从事的社会分工行业，你拥有什么样的做事能力，这个能力在什么层次，什么级别。
如果让你给自己的行业能力评分定级，总分100分，你评多少，为什么？（之前面试一个HRBP问的问题）
我的回答：70分，说下为什么？
答：我说下为什么有剩下的30分的差距，首先前端也是比较新的行业领域，技术体系发展变化日新月异，70%是说我能够保持更新，保持新技术的学习，另一个点来说就是不可能达到100%，总是会有新的技术出来代替旧的技术，这样才能发展。其次，技术不是看了一个新知识，看了一本新书，了解了最前沿的技术就叫技术，那叫做学习。只有把技术和做的事情结合，落地到业务中去，拿到业务结果，才是技术。所以我觉得30%的差距主要是如何将技术落地到业务。当然这个也和业务相关，比如导购业务基本就用不到3D WebGL、多媒体等相关技术领域。
开发智商 # 你的开发智商怎么样？
定位自己，关注自己当前阶断的积累，聚焦拐点，均衡发展。有些能力必须要有历经时间和反复历练形成的成熟度。不要试图跳跃、不要急于求成、不要忽视全面均衡的发展。不要成为职场“豆芽菜”。
浮躁就是只关注解决问题的手段，没有真正提高解决问题能力。修炼自己的元能力。
电影《天才捕手》。在工作中，要积累真实的感受。看再多的书和文章，没有实践，没有在实际的应用场景中应用，都不算有效的经验。
工作中保持痛感，感受快乐是最好的工作状态！
做不同的事情，内心感受是不同的。当你觉得无感时，说明你对技术细节的认知还不够，只是简单的重复。需要通过学习其中所有的技术点来提高技巧。同时，需要不断深入理解，感受实践中用到的技术和工具所发挥的作用。形象的说就是知识的“分辨率”怎么样，是模模糊糊的，还是”精度”很高，了解每一个细微的技术点。你会发现，有太多东西值得探索。只有在具体实践中才有体感，脱离应用场景啃一本书没有用的。进一步，你才能准确定义和抽象出开发中的普便问题。这是提高纵轴挑战水平的方式。所以，不必刻意寻找有挑战、有难度的工作做。重要的是，你能不能潜的更深，积累下更多的有价值的感受。
如果你正在做一件本身挑战很大的事，这时无须再增加挑战水平（纵轴）而是通过发现和学习已知的未知（对应问题域的知识域）技术来解决问题（横轴）。这时候需要拆解目标，降低挑战，耐心从基础开始学习。内心需要克服浮躁和自我怀疑的情绪。没有银弹能解决所有问题。关注前端技术发展，保持学习是十分重要的。
任何一种心理状态都不是一成不变的。比如一些能力不错的同学，对于常规需求，处于完全“掌控”的状态。但干的久了，一直做类似的事情挑战水平自然会衰减，通常会进入“无聊”的状态。然后常常会说工作太无聊，缺乏挑战，一成不变。其实是你主观意识上没有加深工作的感受，只是被动的被支配做一些事。
经常反省自己所处的状态，按照心流图所示，每一件事努力做到心流（同时提高纵轴和横轴）
心态管理很重要，尤其是底部状态管理。面对工作中的挫败、不爽、消极、想放弃的情绪，这些都是很正常的起起伏伏。人在做一件事的中途是最敏感、脆弱，最容易自我怀疑的，很容易怀疑目标和方向，半途而废，前功尽弃，这就是所谓的半途效应。
在做一些挑战很大、路径很长的事情时，动机不要太强。急躁、焦虑会干扰正常的思维水平（多德森法则）。</description></item></channel></rss>