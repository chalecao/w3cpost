<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>svg和canvas on</title><link>/fed-regain/svgcanvas/</link><description>Recent content in svg和canvas on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:49:15 +0000</lastBuildDate><atom:link href="/fed-regain/svgcanvas/index.xml" rel="self" type="application/rss+xml"/><item><title>canvas图片处理与动画</title><link>/fed-regain/svgcanvas/canvas%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E4%B8%8E%E5%8A%A8%E7%94%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fed-regain/svgcanvas/canvas%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86%E4%B8%8E%E5%8A%A8%E7%94%BB/</guid><description>canvas绘制圆角图片 # 先看个例子：
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; &amp;lt;title&amp;gt;Title&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body style=&amp;quot;background: rgba(199,237,204,1)&amp;quot;&amp;gt; &amp;lt;div style=&amp;quot;display:flex; flex-direction: row&amp;quot;&amp;gt; &amp;lt;!--通过style方式为canvas设置宽高在火狐[浏览器](https://www.w3cdoc.com)上导致绘制内容纵向拉伸。。。--&amp;gt; &amp;lt;canvas id=&amp;quot;drawing&amp;quot; width=&amp;quot;400px&amp;quot; height=&amp;quot;400px&amp;quot;&amp;gt;canvas to draw&amp;lt;/canvas&amp;gt; &amp;lt;pre id=&amp;quot;container&amp;quot; style=&amp;quot;margin: 10px&amp;quot;/&amp;gt; &amp;lt;img src=&amp;quot;/android-chrome-192x192.png&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; window.onload=function () { var drawing = document.getElementById('drawing'); if (drawing.getContext) { print('support') addRoundRectFunc(); var context = drawing.getContext('2d'); draw(context); } else { print('not ') } } function draw(context) { context.fillStyle = 'red'; var image = document.images[0]; context.</description></item><item><title>Canvas图像处理和滤镜特效</title><link>/fed-regain/svgcanvas/canvas%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%92%8C%E6%BB%A4%E9%95%9C%E7%89%B9%E6%95%88/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fed-regain/svgcanvas/canvas%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E5%92%8C%E6%BB%A4%E9%95%9C%E7%89%B9%E6%95%88/</guid><description>简介 # 这段时间做了一个手机WebRTC拍照加特效的应用，主要用到canvas标签获取图像矩阵（这个在上一篇博客中已经详细介绍过：），然后做图像处理，例如滤镜特效（马赛克，浮雕，衬底，反色等），这里我们详细介绍相关的知识。其实从原理上讲，大部分的图像处理都是对图像像素矩阵和某个特效矩阵做卷积，得到新的像素矩阵，就是处理后的效果。关于这个大学课程《数字信息处理》里面有详细介绍。
canas介绍 # 上一个介绍WebRTC中使用video标签和canvas标签的文章中，并没有详细的介绍canvas标签。这里补上。
canvas是一个新的HTML元素，这个元素可以被Script语言(通常是JavaScript)用来绘制图形。例如可以用它来画图、合成图象、或做动画。canvas最先在苹果公司(Apple)的Mac OS X Dashboard上被引入，而后被应用于Safari。后面被采用成为HTML5标准规范的一部分。
像其他的html标签一样，canvas拥有大部分通用的属性，比如width和height。canvas标签在使用中一般是通过js来操作的，可以吧canvas看成一个画布，在上面如何作图，js是就是进行创作的工具。操作画布之前，首先要获取改画布的上文context，这个可以理解为环境状态，比如画画之前先固定好画布，看一下画布的大小，决定怎么作画。这个获取上下文也就是这个意思。代码：
目前这个canvas只支持2d绘画，而3d绘画是通过webgl实现的。这个后续课程会讲解到，有兴趣的可以做个预研，了解一下。目前这个使用的比较多的是开源的Three.js框架。
canas绘制文本 # 绘制文本需要用到下列的属性和方法：
属性：
1.context.font属性，获取或设置文本的字体和大小。设置该属性的字符串语法与CSS语法中的font是一样的，不能解析成CSS的值会被忽略掉。
2.context.textAlign属性，获取或设置字体的对其方式。只允许下列值:start, end, left, right, 和center。其他值会被忽略，默认值是start。
3.context.textBaseline属性，获取或设置字体的基准线。有效的值如下：top, hanging, middle, alphabetic, ideographic, bottom。其他值会被忽略，默认值是alphabetic。
用法：
1.context.fillText(text, x, y [, maxWidth ] )，该方法用于在指定的位置绘制文本。如果设置了maxWidth，则会调整字符串使之符合这个条件。
2.context. strokeText(text, x, y [, maxWidth ] )，该方法用于在指定的位置绘制镂空的文本。
例子代码：
canas绘制图片 # 绘制原图：context.drawImage(image, dx, dy)
缩放绘图：context.drawImage(image, dx, dy, dw, dh)
切片绘图：context.drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh)
合理的绘制多幅图像可以做出漂亮的组合效果，比如常见的画廊就是框图片与照片的叠加，只不过要注意绘制的先后顺序。
第一个参数image代表图片的来源，可以是下列几种：
(1)页面内的图片:我们可以通过 document.images 集合、document.getElementsByTagName 方法又或者 document.</description></item><item><title>曾经基于canvas实现的飞机大战</title><link>/fed-regain/svgcanvas/%E6%9B%BE%E7%BB%8F%E5%9F%BA%E4%BA%8Ecanvas%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fed-regain/svgcanvas/%E6%9B%BE%E7%BB%8F%E5%9F%BA%E4%BA%8Ecanvas%E5%AE%9E%E7%8E%B0%E7%9A%84%E9%A3%9E%E6%9C%BA%E5%A4%A7%E6%88%98/</guid><description>首先看几张效果图：
上图分是游戏中的状态，体验一下
先介绍一下canvas 画图的原理，在这个游戏中的背景，飞机，子弹以及飞机被击中爆炸的效果都是一张张的图片，通过canvas的 drawImage() 函数把这一帧需要的所有图片按其所在的位置（坐标）画到画布上，当然有时候也需要画些文本，比如左上角的得分；然后接着画下一帧，同时改变飞机和子弹的位置；画下一帧之前一定要清除画布（通过这个函数 clearRect(x, y, width, height))，不然就是下图的效果啦：
辣眼睛！！！ 不过在本例中因为每帧都要重新画上背景图，背景图又是填满整个画布的，所以画背景图时就等于把上一帧全部覆盖了，也就相当于清除画布了。
下面我们开始聊实现的细节：
加载需要的图片 # 在让游戏跑起来之前要先把需要的图片加载进来，类似：
代码如下：
// 所以图片的链接，包括背景图、各种飞机和飞机爆炸图、子弹图等
var imgName = [‘background.png‘, ‘game_pause_nor.png‘, ‘m1.png‘, ‘start.png‘,
// 敌机1
[‘enemy1.png‘, ‘enemy1_down1.png‘, ‘enemy1_down2.png‘, ‘enemy1_down3.png‘, ‘enemy1_down4.png‘],
// 敌机2
[‘enemy2.png‘, ‘enemy2_down1.png‘, ‘enemy2_down2.png‘, ‘enemy2_down3.png‘, ‘enemy2_down4.png‘],
// 敌机3
[‘enemy3_n1.png‘, ‘enemy3_n2.png‘, ‘enemy3_hit.png‘, ‘enemy3_down1.png‘, ‘enemy3_down2.png‘, ‘enemy3_down3.png‘, ‘enemy3_down4.png‘, ‘enemy3_down5.png‘, ‘enemy3_down6.png‘, ],
// 游戏loading图
[‘game_loading1.png‘, ‘game_loading2.png‘, ‘game_loading3.png‘, ‘game_loading4.png‘],
// 玩家飞机图
[‘hero1.png‘, ‘hero2.png‘, ‘hero_blowup_n1.png‘, ‘hero_blowup_n2.png‘, ‘hero_blowup_n3.png‘, ‘hero_blowup_n4.png‘]
];
// 存储不同类型的图片
var bg = null,
pause = null,
m = null,
startImg = null,
enemy1 = [],
enemy2 = [],
enemy3 = [],
gameLoad = [],
heroImg = [];
// 加载图片的进度
var progress = 1;
/*********加载图片*********/
function download() {
bg = nImg(imgName[0]);
pause = nImg(imgName[1]);
m = nImg(imgName[2]);
startImg = nImg(imgName[3]);
for (var i = 0; i &amp;lt; imgName[4].</description></item><item><title>fabric.js之強大的SVG处理工具类库</title><link>/fed-regain/svgcanvas/fabric-js%E4%B9%8B%E5%BC%B7%E5%A4%A7%E7%9A%84svg%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%BA%93/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fed-regain/svgcanvas/fabric-js%E4%B9%8B%E5%BC%B7%E5%A4%A7%E7%9A%84svg%E5%A4%84%E7%90%86%E5%B7%A5%E5%85%B7%E7%B1%BB%E5%BA%93/</guid><description>什么是Fabric.js # 使用 Fabric.js 你可以创建和填充画布上的对象，从简单的几何图形到成百上千路径组成的复杂图形。你可以通过鼠标轻松的移动、缩放和旋转这些对象，修改它们的属性（颜色、透明度，层叠顺序）等等。
SVG系列教程
总体上，fabric.js提供了2个大功能：
在canvas的底层基础上提供了 object model 提供 canvas的 rendering和state管理 对象 # 基本类型 # 操作对象 # 属性 get(‘width’)和 set({ }):
状态变化时的动作：通过event来实现动画。
层次关系 # fabric.Object： 代表二维形状，具有属性 left/top and width/height properties, as well as a slew of other graphiccharacteristics. Those properties that we saw on objects — fill, stroke, angle, opacity, flip*, etc。 可以在fabric.Object.prototype 定义函数，在fabric.Object的子类上共享。
fabric.Circle 有 radius属性
fabric.Image 有 setElement和getElement
Canvas类 # 是canvas的包装类，管理所有的fabric.Object，有方法： add getObjects item remove。配置：背景色或背景图片，剪切，是否交互等。
Interactive # 支持：选择、拖动、旋转、放大、group together的操作</description></item><item><title>OffscreenCanvas – 概念说明及使用解析</title><link>/fed-regain/svgcanvas/offscreencanvas-%E6%A6%82%E5%BF%B5%E8%AF%B4%E6%98%8E%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%A7%A3%E6%9E%90/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fed-regain/svgcanvas/offscreencanvas-%E6%A6%82%E5%BF%B5%E8%AF%B4%E6%98%8E%E5%8F%8A%E4%BD%BF%E7%94%A8%E8%A7%A3%E6%9E%90/</guid><description>这是个人关于 OffscreenCanvas 的第一篇文章，在这篇文章里会对 OffscreenCanvas 的基本概念进行说明，并通过两个实际的例程来解析它的主要使用方式和应用场景。
OffscreenCanvas 是一个实验中的新特性，主要用于提升 Canvas 2D/3D 绘图应用和 H5 游戏的渲染性能和使用体验。OffscreenCanvas 的 API 很简单，但是要真正掌握好如何使用，需要页端对浏览器内部的一些运作机制有较深入的了解，这也是撰写本文的目的。
跟 OffscreenCanvas 关系比较紧密的还有另外两个新的 API，ImageBitmap 和 ImageBitmapRenderingContext，在文中也会一并进行讲解。
例程的代码可以通过 GitHub 下载。
目前 OffscreenCanvas 在最新版本的 Chrome 和 Firefox 上都可以通过实验室开关打开，Chrome 的开关是 chome://flags -&amp;gt; Experimental Web Platform features，本文的例程是在 Chrome 67 Canary 上进行验证。OffscreenCanvas 的 API 在未来仍有可能会发生一些变化，本文会随之进行更新。
概念说明 # Chrome 开发文档里面对 OffscreenCanvas 的定义是：
A new interface that allows canvas rendering contexts (2D and WebGL) to be used in workers.
Making canvas rendering contexts available to workers will increase parallelism in web applications, leading to increased performance on multi-core systems.</description></item><item><title>SVG压缩与字体图标新思路</title><link>/fed-regain/svgcanvas/svg%E5%8E%8B%E7%BC%A9%E4%B8%8E%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E6%96%B0%E6%80%9D%E8%B7%AF/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fed-regain/svgcanvas/svg%E5%8E%8B%E7%BC%A9%E4%B8%8E%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%E6%96%B0%E6%80%9D%E8%B7%AF/</guid><description>已经很晚了，程序员，程序狗，爱学习不爱加班的我，还是在加班，在学习。为了涨工资，ping了。本节安利一个压缩SVG的工具：svgo(https://github.com/chalecao/svgo)。我们做前端的同学肯定都用过字体图标，有些特殊的字体图标需要视觉做个svg的矢量图，或者你也可以自己做个矢量图，需要学学adobe illustrator,绘制个矢量图，然后保存成svg格式就可以了。然后用记事本打开保存的svg文件，你会发现有许多没有用的svg标签，这时候你需要一个svg压缩工具，可以帮你做这些事情。
SVG系列教程
SVG压缩 # 其实我的好奇心来自于goole的这个图片，这个是DATA URI, 单独用浏览器打开，发现是个svg，编码如下：
DATA－URI的格式为：
data: [][; base64]，
例如：
一个红色五角星形状的内联图片可以定义为:
所以把后面的一长串用base64解码之后呢，就得到：
于是乎，我有了一个新的思路，以后用svg做字体图标就更方便了，只要把svg图标转一下成data uri，然后字体就可以用这个img图片或者背景图。不过需要考虑通用性，如果用图片，那么每个地方都写一遍这个dataURI，明显是不合适的。如果用背景图片，那么控制大小颜色就不太方便。所以这个方法还是有问题。呵呵，我又把自己打败了。
压缩svg # 做这些事情之前呢，就是先用 illustrator制作矢量图，探后保存成svg，然后转成data uri。为了保证data uri不会太大，所以需要压缩处理一下svg格式的文件，去除没有用的数据。
参考资料：
(1) svgo
(2) SVG精简压缩工具svgo简介和初体验
(3) data uri
谢谢！ # 转载请注明出处：//fed123.oss-ap-southeast-2.aliyuncs.com/2016/11/02/2016_svg4/
欢迎关注皓眸学问公众号（扫描左侧二维码），每天好文、新技术！任何学习疑问或者工作问题都可以给我留言、互动。T_T 皓眸大前端开发学习 T_T</description></item><item><title>SVG嵌套视窗综合实例</title><link>/fed-regain/svgcanvas/svg%E5%B5%8C%E5%A5%97%E8%A7%86%E7%AA%97%E7%BB%BC%E5%90%88%E5%AE%9E%E4%BE%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fed-regain/svgcanvas/svg%E5%B5%8C%E5%A5%97%E8%A7%86%E7%AA%97%E7%BB%BC%E5%90%88%E5%AE%9E%E4%BE%8B/</guid><description>SVG新视窗 # 在SVG绘制的任何一个时刻，你可以通过嵌套svg或者使用例如symbol的元素来建立新的viewport和用户坐标系。在这篇文章中，我们将看一下我们如何这样做，以及这样做如何帮助我们控制SVG元素并让它们变得更加灵活（或流动）。
SVG系列教程
嵌套svg元素 # 在第一部分我们讨论了svg元素如何为SVG画布内容建立一个视窗。在SVG绘制过程中的任何一个时刻，你可以创建一个新的视窗其中包含的图形是通过把一个svg元素包含在另一个中绘制的。通过建立新视窗，你隐性得建立了一个新视窗坐标系和新用户坐标系。
例如，试想有一个svg以及里面的内容：
&amp;lt;svg xmlns=&amp;quot;https://www.w3.org/2000/svg&amp;quot; xmlns:xlink=&amp;quot;https://www.w3.org/1999/xlink&amp;quot;&amp;gt; &amp;lt;!-- some SVG content --&amp;gt; &amp;lt;svg&amp;gt; &amp;lt;!-- some inner SVG content --&amp;gt; &amp;lt;/svg&amp;gt; &amp;lt;/svg&amp;gt; 第一件需要注意的是内容svg元素不需要声明一个命名空间xmlns因为默认和外层svg的命名空间相同。当然，如果在HTML5文档中外层svg也不需要命名空间。
你可以使用一个嵌套的SVG来把元素组合在一起然后在父SVG中定位它们。现在，你也可以把元素组合在一起并且使用组g来定位-通过把元素包括在一组g元素中。你可以使用transform属性在画布中定位它们。然而，使用svg肯定好过使用g。使用x和y坐标来定位，在许多情况下，比使用变换更加方便。另外，svg元素接受宽高值，g不行。这意味着，svg也许并必要的，因为它可以创建一个新的viewport和坐标系，你可以不需要也不想要。
通过给svg声明宽高值，你把内容限制在通过x,y,width和height属性定义的viewport的边界。任何超过边界的内容会被裁切。
如果你不声明x和y属性，它们默认是0。如果你不声明height和width属性，svg会是父SVG宽度和高度的100%。
另外，声明用户坐标系而不是默认的也会影响内部svg的内容。
给svg内的元素百分比值的声明会根据svg计算，而不是外层svg。例如，下面的代码会导致内层SVG等于400单位，里面的长方形是200个单位：
&amp;lt;svg width=&amp;quot;800&amp;quot; height=&amp;quot;600&amp;quot;&amp;gt; &amp;lt;svg width=&amp;quot;50%&amp;quot; ..&amp;gt;&amp;lt;rect width=&amp;quot;50%&amp;quot; ... /&amp;gt; &amp;lt;/svg&amp;gt; &amp;lt;/svg&amp;gt; 如果最外层svg的宽度为100%（例如，如果它在一个文档中内联或者你想要它可以流动），内层SVG会扩展拉伸来保持宽度为外层SVG的一半-这是强制的。
嵌套SVG在给SVG画布中的元素增加灵活性和扩展性时尤其有用。我们知道，使用viewBox值和preserveAspectRatio，我们已经可以创建响应式SVG。最外层svg的宽度可以设置成100%来确保它扩展拉伸到它的容器（或页面）扩展或拉伸。然后通过使用viewBox值和 preserveAspectRatio，我们可以保证SVG画布可以自适应viewport中的改变（最外层svg）。我在CSSConf演讲的幻灯片中写到了关于响应式SVG的内容。你可以在这里查看这个技术。
然而，当我们像这样创建一个响应式SVG，整个画布以及所有绘制在上面的元素都会有反应并且同时改变。但有时候，你只想让图形中的一个元素变为响应式，并且保持其他东西“固定”在一个位置和/或尺寸。这时候嵌套svg就很有用。
svg元素有独立于它父元素的坐标系，它可以有独立的viewBox和preserveAspectRatio属性，你可以任意修改里面内容的尺寸和位置。
所以，要让一个元素更加灵活，我们可以把它包裹在svg元素中，并且给svg一个弹性的宽度来适应最外层SVG的宽度，然后声明preserveAspectRatio=”none”这样的话里面的图形会扩展和拉伸到容器的宽度。注意svg可以多层嵌套，但是为了让事情简洁，我在这篇文章里只嵌套一层深度。
为了演示嵌套svg如何发挥作用，让我们来看一些例子。
例子,试想我们有如下的SVG：
上述SVG是响应式的。改变屏幕的尺寸会导致整个SVG图形根据需要做出反应。下面的截图展示了拉伸页面的结果，以及SVG如何变得更小。注意SVG的内容如何根据SVG视窗和相互之间保持它们的初始位置。
使用嵌套SVG，我们将改变这个情况。我们可以对SVG中每个独立的元素根据SVG视窗声明一个位置，所以随着SVG 视窗尺寸的改变（即最外层svg的改变），每个元素独立于其他元素发生改变。
注意，在这个时候，你需要熟悉SVG viewport, viewBox, 和preserveAspectRatio是如何生效的。
我们将要创建一个效果，当屏幕尺寸变化时，蛋壳的上部分移动使得其中的可爱的小鸡显示出来，如下图所示：
为了达到这个效果，蛋的上半部分必须和其他部分分离出来单独包含一个自己的svg。这个svg包含框会有一个IDupper-shell。
然后，我们保证新的svg#upper-shell和外层SVG有一样的高度和宽度。可以通过在svg上声明width=”100%” height=”100%”或者不声明任何高度和宽度来实现。如果内层SVG上没有声明任何宽高，它会自动扩展为外层SVG宽高的100%。
最终，为了确保上壳被“抬”起或定位在svg#upper-shell顶部的中心，我们将使用适当的preserveAspectRatio值来确保viewBox被定位在视窗的顶部中心-值是xMidYMin。
SVG图形的代码如下：
&amp;lt;svg version=&amp;quot;1.1&amp;quot; xmlns=&amp;quot;https://www.w3.org/2000/svg&amp;quot; xmlns:xlink=&amp;quot;https://www.w3.org/1999/xlink&amp;quot;&amp;gt; &amp;lt;!-- ... --&amp;gt; &amp;lt;svg viewBox=&amp;quot;0 0 315 385&amp;quot; preserveAspectRatio=&amp;quot;xMidYMid meet&amp;quot;&amp;gt; &amp;lt;!</description></item><item><title>SVG的牛B之处，你造吗</title><link>/fed-regain/svgcanvas/svg%E7%9A%84%E7%89%9Bb%E4%B9%8B%E5%A4%84%E4%BD%A0%E9%80%A0%E5%90%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fed-regain/svgcanvas/svg%E7%9A%84%E7%89%9Bb%E4%B9%8B%E5%A4%84%E4%BD%A0%E9%80%A0%E5%90%97/</guid><description>牛掰掰的svg # SVG能干啥，想干啥就干啥。可以用来做贴图，做纹理，做动画，甚至做背景图片，你想要的都可以，关键是操作灵活，和别是和canvas又可以相互转化使用，简直是居家旅行必备神器，作为前端工程师，你学会了吗？不会，就抓紧开始吧。
SVG系列教程
大致的写法也就这样子:
除了简写的SVG结构，还有一种典型的SVG结构。通常情况之下，一个SVG文件包含内部链接，在这种情况之下，必须定义xlink声明空间https://www.w3.org/1999/xlink:
在这个示例中，还声明了SVG画布的大小。定义SVG画布大小是可选的，但强烈推荐，使用SVG时定义其画布大小。
在使用代码编写SVG时，最好加上DTD，这是非常有用的。在一些示例中，你可能会看到这样的代码：
什么是SVG # SVG是”Scalable Vector Graphics”的简称。中文可以理解成“可缩放矢量图形”。这个概念对于设计师来讲一点不陌生，但对于码农来讲，总是没有设计师们理解的那么透彻。其实码农们也没必要理解的那么透彻，只需要知道他是web页中的矢量图即可。
其实记住几个关键词，SVG是可缩放矢量图形，1999年由万维网联盟发布。于2013年成为W3C推荐标准。
1.SVG是指可伸缩矢量图形
2.SVG用来定义用于网络的基于矢量的图形
3.SVG使用XML格式定义图形
4.SVG图像在放大或缩小（改变尺寸）的情况下，其图形质量不会受受损失
5.SVG是W3C的一个标准
SVG有哪些优势 # SVG也是用来图形化的东东，那么他与位图相比有什么优势呢？(随着屏幕多样化的出现，特别是Retina的出现以及爱疯6和Plus，对于图形在Web中的应用更具挑战性。)
从图中可以明显看出，位图与SVG图PK出来的结果。
与其他图像格式相比，使用SVG的优势在于：
1.SVG可被非常多的工具读取和修改（比如记事本）
2.SVG与JPEG和GIF图像比起来，尺寸更小，且可压缩性更强。
3.SVG是可伸缩的
4.SVG图像可在任何的分辨率下被高质量地打印
5.SVG可在图像质量不下降的情况下被放大
6.SVG图像中的文本是可选的，同时也是可搜索的（很适合制作地图）
7.SVG可以与Java技术一起运行
8.SVG是开放的标准
9.SVG文件是纯粹的XML
如何显示SVG # SVG文件是纯粹的XML，或许大家更为关心的是如何在Web浏览器中让SVG显示。要在浏览器中显示（前提是浏览器支持），可以通过几种方法来实现：
1.指向SVG文件地址, 将SVG直接嵌套在HTML中
而将SVG图像嵌入到HTML文件有多种方法：
使用img元素来嵌入SVG图像
将SVG图像作为背景图像嵌入
直接使用svg元素
5.使用embed元素来嵌入SVG图像
6.使用object元素来嵌入SVG图像
7.使用svg做纹理显示
这个用SVG做纹理填充另外一个svg比较牛逼，可以深度自定义。现在好多图形图表的插件就是这么做的，而且通过canvas可以直接把绘制的图形保存成本地图片，方便一笔。
比如专门做图形化的JS类库：
1.D3.js: https://d3js.org/
2.Raphael.js：https://raphaeljs.com/
基础知识 # 参考下面几个手册吧：
w3school svg：https://www.w3school.com.cn/svg/ svg 手册：https://www.runoob.com/svg/svg-tutorial.html 浏览器支持 # SVG图像虽然很多年就出现在人们的视线中，可是当年其就是后娘生的娃娃，没人爱搭理。只不过凭借其自身的魅力，各大浏览器也开始器重。所以得到的支持度相对于当初要高很多。
可算是一片绿地呀。有关于更详细的兼容情况可以阅读Caniuse提供的数据。
谢谢！ # 转载请注明出处：//fed123.oss-ap-southeast-2.aliyuncs.com/2015/10/30/2015_svg/
欢迎关注皓眸学问公众号（扫描左侧二维码），每天好文、新技术！任何学习疑问或者工作问题都可以给我留言、互动。T_T 皓眸大前端开发学习 T_T</description></item><item><title>SVG的视窗与宽高比控制</title><link>/fed-regain/svgcanvas/svg%E7%9A%84%E8%A7%86%E7%AA%97%E4%B8%8E%E5%AE%BD%E9%AB%98%E6%AF%94%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fed-regain/svgcanvas/svg%E7%9A%84%E8%A7%86%E7%AA%97%E4%B8%8E%E5%AE%BD%E9%AB%98%E6%AF%94%E6%8E%A7%E5%88%B6/</guid><description>SVG坐标系 # SVG元素不像HTML元素一样由CSS盒模型管理。这使得我们可以更加灵活定位和变换这些元素-也许一眼看上去不太直观。然而，一旦你理解了SVG坐标系和变换，操纵SVG会非常简单并且很有意义。本篇文章中我们将讨论控制SVG坐标系的最重要的三个属性：viewport， viewBox， 和 preserveAspectRatio。
SVG系列教程
canvas是绘制SVG内容的一块空间或区域。理论上，画布在所有维度上都是无限的。所以SVG可以是任意尺寸。然而，SVG通过有限区域展现在屏幕上，这个区域叫做viewport。SVG中超出视窗边界的区域会被裁切并且隐藏。
视窗 # 视窗是一块SVG可见的区域。你可以把视窗当做一个窗户，透过这个窗户可以看到特定的景象，景象也许完整，也许只有一部分。
SVG的视窗类似访问当前页面的浏览器视窗。网页可以是任何尺寸；它可以大于视窗宽度，并且在大多数情况下都比视窗高度要高。然而，每个时刻只有一部分网页内容是透过视窗可见的。
整个SVG画布可见还是部分可见取决于这个canvas的尺寸以及preserveAspectRatio属性值。你现在不需要担心这些；我们之后会讨论更多的细节。
你可以在最外层svg元素上使用width和height属性声明视窗尺寸。
在SVG中，值可以带单位也不可以不带。一个不带单位的值可以在用户空间中通过用户单位声明。如果值通过用户单位声明，那么这个值的数值被认为和px单位的数值一样。这意味着上述例子将被渲染为800px*600px的视窗。
你也可以使用单位来声明值。SVG支持的长度单位有：em，ex，px，pt，pc，cm，mm，in和百分比。
一旦你设定最外层SVG元素的宽高，浏览器会建立初始视窗坐标系和初始用户坐标系。
初始坐标系 # 初始视窗坐标系是一个建立在视窗上的坐标系。原点(0,0)在视窗的左上角，X轴正向指向右，Y轴正向指向下，初始坐标系中的一个单位等于视窗中的一个”像素”。这个坐标系统类似于通过CSS盒模型在HTML元素上建立的坐标系。
初始用户坐标系是建立在SVG画布上的坐标系。这个坐标系一开始和视窗坐标系完全一样-它自己的原点位于视窗左上角，x轴正向指向右，y轴正向指向下。使用viewBox属性，初始用户坐标系统-也称当前坐标系，或使用中的用户空间-可以变成与视窗坐标系不一样的坐标系。我们在一下节中讨论如何改变坐标系。
到现在为止，我们还没有声明viewBox属性值。SVG画布的用户坐标系统和视窗坐标系统完全一样。
下图中，视窗坐标系的”标尺”是灰色的，用户坐标系（viewBox）的是蓝色的。由于它们在这个时候完全相同，所以两个坐标系统重合了。
上面SVG中的鹦鹉的外框边界是200个单位（这个例子中是200个像素）宽和300个单位高。鹦鹉基于初始坐标系在画布中绘制。
新用户空间（即，新当前坐标系）也可以通过在容器元素或图形元素上使用transform属性来声明变换。我们将在后面讨论关于变换的内容，更多细节在第三部分和最后部分中讨论。
viewBox # 我喜欢把viewBox理解为“真实”坐标系。首先，它是用来把SVG图形绘制到画布上的坐标系。这个坐标系可以大于视窗也可以小于视窗，在视窗中可以整体可见或部分可见。
在之前的章节里，这个坐标系-用户坐标系-和视窗坐标系完全一样。因为我们没有把它声明成其他坐标系。这就是为什么所有的定位和绘制看起来是基于视窗坐标系的。因为我们一旦创建视窗坐标系（使用width和height），浏览器默认创建一个完全相同的用户坐标系。
你可以使用viewBox属性声明自己的用户坐标系。如果你选择的用户坐标系统和视窗坐标系统宽高比（高比宽）相同，它会延伸来适应整个视窗区域（一分钟内我们就来讲个例子）。然而，如果你的用户坐标系宽高比不同，你可以用preserveAspectRatio属性来声明整个系统在视窗内是否可见，你也可以用它来声明在视窗中如何定位。我们会在下个章节里讨论这一情况的细节和例子。在这一章里，我们只讨论viewBox的宽高比符合视窗的情况-在这些例子中，preserveAspectRatio不产生影响。
在我们讨论这些例子前，我们回顾一下viewBox的语法。
viewBox语法 # viewBox属性接收四个参数值，包括：min-x, min-y, width 和 height。
min-x 和 min-y 值决定viewBox的左上角，width和height决定视窗的宽高。这里要注意视窗的宽高不一定和父svg元素的宽高一样。width和height值为负数是不合法的。值为0的话会禁止元素的渲染。
注意视窗的宽度也可以在CSS中设置为任何值。例如：设置width:100%会让SVG视窗在文档中自适应。无论viewBox的值是多少，它会映射为外层SVG元素计算出的宽度值。
设置viewBox的例子如下：
如果你之前在其他地方看到过viewBox，你也许会看到一些解释说你可以用viewBox属性通过缩放或者变化使SVG图形变换。这是真的。我将深入探究并且告诉你甚至可以使用viewBox来切割SVG图形。
理解viewBox和视窗之间差异最好的方法是亲身观察。所以让我们看一些例子。我们将从viewBox和viewport的宽高比相同的例子开始，所以我们还不需要深入了解preserveAspectRatio。
与viewport宽高比相同的viewBox # 我们从一个简单的例子开始。这个例子中的viewBox的尺寸是视窗尺寸的一半。在这个例子中我们不改变viewBox的原点，所以min-x和min-y都设置成0。viewBox的宽高是viewport宽高的一半。这意味着我们保持宽高比。
所以，viewBox=”0 0 400 300”到底有什么用呢？
它声明了一个特定的区域，canvas横跨左上角的点(0,0)到点(400,300)。 SVG图像被这个区域裁切。 区域被拉伸（类似缩放效果）来充满整个视窗。 用户坐标系被映射到视窗坐标系-在这种情况下-一个用户单位等于两个视窗单位。
下面的图片展示了在我们例子中把上面的viewBox应用到svg 画布中的效果。灰色单位代表视窗坐标系，蓝色坐标系代表viewBox建立的用户坐标系。
任何在SVG画布中画的内容都会被对应到新的用户坐标系中。 我喜欢像Google地图一样通过viewBox把SVG画布形象化。在Google地图中你可以在特定区域缩放；这个区域是唯一可见的，并且在浏览器视窗中按比例增加。然而，你知道地图的剩余部分还在那里，但是不可见因为它超出视窗的边界-被裁切了。
现在让我们试着改变min-x和min-y的值。都设置为100。你可以设置成任何你想要的值。宽高比还是和视窗的宽高比一样。
再一次，用户坐标系被映射到视窗坐标系-200用户单位映射为800视窗单位因此每个用户单位等于四个视窗单位。结果像你看到的那样是放大的效果。
另外注意，在这个时候，为min-x和min-y声明非0的值对图形有变换的效果；更加特别的是，SVG 画布看起来向上拉伸100个单位，向左拉伸100个单位（transform=”translate(-100 -100)”）。
的确，作为规范说明，“viewBox属性的影响在于用户代理自动添加适当的变换矩阵来把用户空间中具体的矩形映射到指定区域的边界（通常是视窗）”。
这是一个很棒的说明我们之前已经提到的内容的方法：图形被裁切然后被缩放以适应视窗。这个说明随后增加了一个注释：“在一些情况下用户代理在缩放变换之外需要增加一个移动变换。例如，在最外层的svg元素上，如果viewBox属性对min-x和min-y声明非0值得那么就需要移动变换。”
为了更好演示移动变换，让我们试着给和添加-100。移动效果类似transform=”translate(100 100)”；这意味着图形会在切割和缩放后移动到右下方。回顾倒数第二个裁切尺寸为400*300的例子，添加新的无效min-x和min-y值，新的代码如下：</description></item><item><title>SVG缩放，移动，倾斜和旋转变换</title><link>/fed-regain/svgcanvas/svg%E7%BC%A9%E6%94%BE%E7%A7%BB%E5%8A%A8%E5%80%BE%E6%96%9C%E5%92%8C%E6%97%8B%E8%BD%AC%E5%8F%98%E6%8D%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/fed-regain/svgcanvas/svg%E7%BC%A9%E6%94%BE%E7%A7%BB%E5%8A%A8%E5%80%BE%E6%96%9C%E5%92%8C%E6%97%8B%E8%BD%AC%E5%8F%98%E6%8D%A2/</guid><description>SVG坐标系 # SVG元素可以通过缩放，移动，倾斜和旋转来变换-类似HTML元素使用CSS transform来变换。然而，当涉及到坐标系时这些变换所产生的影响必然有一定差别。在这篇文章中我们讨论SVG的transform属性和CSS属性，包括如何使用，以及你必须知道的关于SVG坐标系变换的知识。
SVG系列教程
transform属性值 # tranform属性用来对一个元素声明一个或多个变换。它输入一个带有顺序的变换定义列表的transform-list值。每个变换定义由空格或逗号隔开。给元素添加变换看起来如下：
有效地SVG变换有：旋转, 缩放, 移动, 和倾斜。transform属性中使用的变换函数类似于CSS中transform属性使用的CSS变换函数，除了参数不同。
注意下列的函数语法定义只在transform属性中有效。查看section about transforming SVGs with CSS properties获取关于CSS变换属性中使用的语法信息。
Matrix # 你可以使用matrix()函数在SVG元素上添加一个或多个变换。matrix变换语法如下：
上述声明通过一个有6个值的变换矩阵声明一个变换。matrix(a,b,c,d,e,f)等同于添加变换matrix[a b c d e f]。
如果你不精通数学，最好不要用这个函数。对于那些精通的人，你可以在这里阅读更多关于数学的内容。因此这个函数很少使用-我将忽略来讨论其他变换函数。
Translation # 要移动SVG元素，你可以用translate()函数。translate函数的语法如下：
translate()函数输入一个或两个值得来声明水平和竖直移动值。tx代表x轴上的translation值；ty代表y轴上的translation值。
ty值是可选的，如果省略，默认值为0。tx和ty值可以通过空格或者逗号分隔，它们在函数中不代表任何单位-它们默认等于当前用户坐标系单位。
下面的例子把一个元素向右移动100个用户单位，向下移动300个用户单位。
上述代码如果以translate(100, 300)用逗号来分隔值的形式声明一样有效。
Scaling # 你可以通过使用scale()函数变换来向上或者向下缩放来改变SVG元素的尺寸。scale变换的语法是：
scale()函数输入一个或两个值来声明水平和竖直缩放值。sx代表沿x轴的缩放值，用来水平延长或者拉伸元素；sy代表沿y轴缩放值，用来垂直延长或者缩放元素。
sy值是可选的，如果省略默认值等于sx。sx和sy可以用空格或者逗号分隔，它们是无单位值。
下面例子把一个元素的尺寸根据最初的尺寸放大两倍：
下列例子把一个元素缩放到最初宽度的两倍，并且把高度压缩到最初的一半：
上述例子使用逗号分隔的值例如scale(2, .5)仍然有效。
这里需要注意当SVG元素缩放时，整个坐标系被缩放，导致元素在视窗中重新定位，现在不用担心这些，我们会在下一节中讨论细节。
Skew # SVG元素也可以被倾斜，要倾斜一个元素，你可以使用一个或多个倾斜函数skewX 和 skewY。
函数skewX声明一个沿x轴的倾斜；函数skewY声明一个沿y轴的倾斜。
倾斜角度声明是无单位角度的默认是度。
注意倾斜一个元素可能会导致元素在视窗中重新定位。在下一节中有更多细节。
Rotation # 你可以使用rotate()函数来旋转SVG元素。这个函数的语法如下：
rotate()函数对于给定的点和 旋转角度值执行旋转。不像CSS3中的旋转变换，不能声明除degress之外的单位。角度值默认无单位，默认单位是度。
可选的cx和cy值代表无单位的旋转中心点。如果没有设置cx和cy，旋转点是当前用户坐标系的原点（查看第一部分如果你不知道用户坐标系是什么。）
在函数rotate()中声明旋转中心点一个快捷方式类似于CSS中设置transform: rotate()和transform-origin。SVG中默认的旋转中心是当前使用的用户坐标系的左上角，这样也许你无法创建想要的旋转效果，你可以在rotate()中声明一个新的中心点。如果你知道元素在SVG画布中的尺寸和定位，你可以把它的中心设置为旋转中心。
下面的例子是以当前用户坐标系中的(50,50)点为中心进行旋转一组元素：
然而，如果你想要一个元素围绕它的中心旋转，你也许想要像CSS中一样声明中心为50% 50%；不幸的是，在rotate()函数中这样做是不允许的-你必须用绝对坐标。然而，你可以在CSS的transform属性中使用transform-origin属性。这篇文章后面会讨论更多细节。
坐标系变化 # 现在我们已经讨论了所有可能的SVG变换函数，我们深入挖掘视觉部分和对SVG元素添加每个变换的效果。这是SVG变换最重要的部分。因此它们被称为“坐标系统变换”而不仅仅是“元素变换”。
在这个说明中，transform属性被定义成两个在被添加的元素上建立新用户空间（当前坐标系）之一-viewBox属性是创建新用户空间的两个属性中的另一个。所以到底是什么意思呢？</description></item></channel></rss>