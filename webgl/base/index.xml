<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>理论基础 on</title><link>/webgl/base/</link><description>Recent content in 理论基础 on</description><generator>Hugo -- gohugo.io</generator><lastBuildDate>Tue, 06 Oct 2020 08:48:23 +0000</lastBuildDate><atom:link href="/webgl/base/index.xml" rel="self" type="application/rss+xml"/><item><title>基础教程</title><link>/webgl/base/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webgl/base/%E5%9F%BA%E7%A1%80%E6%95%99%E7%A8%8B/</guid><description>学习WebGL很长时间了，但是总是东拼一下，西凑一点，没有系统总结。趁现在经济危机，俺要发奋图强。这里总结一下，基于ThreeJs官网 和其他网上看的博客内容，定期更新本系列课程。今天突然发现，博客写了两三年了，人还是没变。我还是坚持做自己喜欢的事情。可是现在觉得自己越走越远，总结更新一下最近学习的知识。
理论 # 0.1 图像处理的数学理论
0.2 最临近插值-双线性插值算法原理 0.3 OpenGL ES 2.0基本概念
0.4 理解墨卡托投影原理
0.5 国内外主要的投影类型
0.6 二维图形旋转公式的推导
0.7 javascript动画、运动算法详细解释与分析 （三、Tween 运动算法：二次方曲线算法）
相关基础 # 2.1 模型视图矩阵和投影矩阵
2.2 着色器和缓冲区
2.3 纹理、帧、深度检测和混合
2.4 光照原理和光照渲染</description></item><item><title>图像处理的数学理论</title><link>/webgl/base/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%9A%84%E6%95%B0%E5%AD%A6%E7%90%86%E8%AE%BA/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/webgl/base/%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E7%9A%84%E6%95%B0%E5%AD%A6%E7%90%86%E8%AE%BA/</guid><description>本篇主要介绍图像处理中一些常用的数学理论，比如卷积，拉普拉斯变换，傅里叶变换等等。通过列举很多有趣的生活实例，增加对理论的理解。想起当时大学学的课程，突然感觉一位好老师是那么的重要，当然也不是随随便便就可以成为好老师的。这里大部分例子也是从网上搜集的，主要是分享知识。
滤波与卷积的区别 # 图像处理中滤波和卷积原理上相似，但是在实现的细节上存在一些区别。 滤波操作就是图像对应像素与掩膜（mask）的对应元素相乘相加。而卷积操作是图像对应像素与旋转180度的卷积核对应元素相乘相加。
下面是一个卷积示意图（卷积核已经旋转180°）
卷积 # 卷积操作也是卷积核与图像对应位置的乘积和。但是卷积操作在做乘积之前，需要先 将卷积核翻转180度，之后再做乘积。其数学定义为：
一般称g为作用在f上的filter或kernel。f是图像，g叫滤波器或卷积核
卷积核的要求 # 对于滤波器，也有一定的规则要求：
1）滤波器的大小应该是奇数，这样它才有一个中心，例如3x3，5x5或者7x7。有中心了，也有 了半径的称呼，例如5x5大小的核的半径就是2。 2）滤波器矩阵所有的元素之和应该要等于1，这是为了保证滤波前后图像的亮度保持不变。但 这不是硬性要求。 3）如果滤波器矩阵所有元素之和大于1，那么滤波后的图像就会比原图像更亮，反之，如果小 于1，那么得到的图像就会变暗。如果和为0，图像不会变黑，但也会非常暗。 4）对于滤波后的结构，可能会出现负数或者大于255的数值。对这种情况，我们将他们直接截 断到0和255之间即可。对于负数，也可以取绝对值。
卷积的意义 # 在具体应用中，往往有多个卷积核，可以认为，每个卷积核代表了一种图像模式。 如果某个图像块与此卷积核卷积出的值大，则认为此图像块十分接近于此卷积核。 例如，如果我们设计了6个卷积核，可以理解：我们认为这个图像上有6种底层纹理模式， 也就是我们用6种基础模式就能描绘出一副图像。 例如： 用Gx来卷积下面这张图的话，就会在中间黑白边界获得比较大的值。
常用的卷积核 # 一个没有任何效果的卷积核： # 将原像素中间像素值乘1，其余全部乘0。 显然像素值不会发生任何变化。
平滑均值滤波 # 取九个值的平均值代替中间像素值，用于过滤高频噪声点
高斯平滑 # 高斯平滑水平和垂直方向呈现高斯分布，更突出了中心点在像素平滑后的权重，相比于均值滤波而言，有着更好的平滑效果。
图像锐化 # 图像锐化使用的是拉普拉斯变换核函数： Soble边缘检测 # Soble更强调了和边缘相邻的像素点对边缘的影响。
卷积解决的问题 # 卷积负责提取图像中的局部特征
更多學習資料
图像处理之卷积概念 # 我们来看一下一维卷积的概念.
连续空间的卷积定义是 f(x)与g(x)的卷积是 f(t-x)g(x) 在t从负无穷到正无穷的积分值.t-x要在f(x)定义域内,所以看上去很大的积分实际上还是在一定范围的.
实际的过程就是f(x) 先做一个Y轴的反转,然后再沿X轴平移t就是f(t-x),然后再把g(x)拿来,两者乘积的值再积分.想象一下如果g(x)或者f(x)是个单位的阶越函数. 那么就是f(t-x)与g(x)相交部分的面积.这就是卷积了.
把积分符号换成求和就是离散空间的卷积定义了.
那么在图像中卷积卷积地是什么意思呢,就是图像f(x),模板g(x),然后将模版g(x)在模版中移动,每到一个位置,就把f(x)与g(x)的定义域相交的元素进行乘积并且求和,得出新的图像一点,就是被卷积后的图像. 模版又称为卷积核.卷积核做一个矩阵的形状.
卷积定义上是线性系统分析经常用到的.线性系统就是一个系统的输入和输出的关系是线性关系.就是说整个系统可以分解成N多的无关独立变化,整个系统就是这些变化的累加.
如 x1-&amp;gt;y1, x2-&amp;gt;y2; 那么A_x1 + B_x2 -&amp;gt; A_y1 + B_y2 这就是线性系统.</description></item></channel></rss>